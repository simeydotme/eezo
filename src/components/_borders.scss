
// defaults based on defaults.scss.
// override in your project before including @mixin for customisation.

$border-prop: "bor" !default;
$border-bps: $default-bps !default;


$border-colors: $colors !default;

$border-coords: (
    "": "",
    "t": "top",
    "b": "bottom",
    "l": "left",
    "r": "right"
) !default;


$border-sizes: (
    "1": rems( 1px ),
    "2": rems( 2px ),
    "3": rems( 3px )
) !default;


$border-styles: (
    "": "solid",
    "dash": "dashed",
    "dot": "dotted"
) !default;


$border-radius-prop: $border-prop !default;
$border-radius: (
    "rad1": rems( 1px ),
    "rad2": rems( 2px ),
    "rad3": rems( 3px ),
    "rad4": rems( 4px ),
    "rad5": rems( 5px ),
    "rad10": rems( 10px ),
    "circle": rems( 100% )
) !default;


@mixin border-styles( $bps: $border-bps ) {

    @each $b in $bps {

        @if $b == nth( $default-bps, 1 ) {
            $b: "";
        }

        @include breakpoint( $b ) {

            $bp: hyphen-after( $b );
            $prop: hyphen-after( $border-prop );

            @each $c in $border-coords {

                $coord-key: nth( $c, 1 );
                $coord-val: hyphen( nth( $c, 2 ) );

                @each $size in $border-sizes {

                    $size-key: nth( $size, 1 );
                    $size-val: nth( $size, 2 );

                    @each $style in $border-styles {

                        $style-key: nth( $style, 1 );
                        $style-val: nth( $style, 2 );
                        $suffix: #{ $coord-key }#{ $size-key }#{ $style-key };

                        .#{ $bp }#{ $prop }#{ $suffix } {
                            #{ "border" }#{ $coord-val }: $size-val $style-val;
                        }

                    }

                }

            }

        }

    }

}

@mixin border-colors() {

    @each $c in $border-coords {

        $coord-key: hyphen-after( nth( $c, 1 ) );
        $coord-val: hyphen-after( nth( $c, 2 ) );

        @each $clr in $border-colors {

            $clr-key: nth( $clr, 1 );
            $clr-val: nth( $clr, 2 );

            .#{ hyphen-after( $border-prop ) }#{ $coord-key }#{ $clr-key } {

                #{ "border-" + $coord-val + "color" }: $clr-val;
                
            }

        }

    }

}

@mixin border-radius() {

    @each $rad in $border-radius {

        $key: nth( $rad, 1 );
        $val: nth( $rad, 2 );

        .#{ hyphen-after( $border-radius-prop ) }#{ $key } {

            border-radius: $val;
            
        }

    }

}

// the output mixin which we can use in eezo.scss
// and can be included in your project.

@mixin borders() {
            
    @include border-styles();
    @include border-colors();
    @include border-radius();

}
