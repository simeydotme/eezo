
extends ./layout/columns

block title
    | docs | colours




mixin table-row( bg, hex )

    tr
        td.pad-v2.pad-h3= bg
        td.pad-v2.pad-h3= hex
        td.pad-v2.pad-h3.bor-1dot.bor-t0.bor-light( class="bg-" + bg )







append content



    +main-title( "Colours" )

    +intro-text
        :marked
            Eezo comes with the ability to change colours of some
            properties such as **text**, **background-color**
            and **borders**. The colours can also be customised in sass
            by changing the default values or adding more colours.




    +sub-title( "Default Colours" )

    :marked
        These are the default colours that come with Eezo, they are
        mostly just nice defaults for general UI purposes
        with a slightly cool hue for greys.

        The `black` and `white` colors are both set
        to a *"nicer"* shade with no saturation. And the greys are 
        slightly saturated with a cool hue. [why? read 
        this.](http://ianstormtaylor.com/design-tip-never-use-black/)

    +table

        thead

            tr

                +table-head class name
                +table-head hex value
                +table-head example

        tbody.txt-code

            +table-row( "x", "transparent" )
            +table-row( "wht", "#ffffff" )
            +table-row( "white", "#f9f9f9" )
            +table-row( "cream", "#f7f2eb" )
            +table-row( "light", "#b5b8bf" )
            +table-row( "grey", "#82848e" )
            +table-row( "dark", "#575c67" )
            +table-row( "pitch", "#161f23" )
            +table-row( "black", "#1a1a1a" )
            +table-row( "blk", "#000000" )


    +sub-title( "Extra Colours" )

    :marked
        The extra colours are just some *"pretty OK"*
        colours to jump-start your ui. They only come with 
        the <strong class="txt-sans">Core+</strong> bundle
        and can be easily overridden with customisation in sass.

    +table

        thead

            tr

                +table-head class name
                +table-head hex value
                +table-head example

        tbody.txt-code

            +table-row( "silver", "#dde3e6" )
            +table-row( "gold", "#c7aa5c" )
            +table-row( "yellow", "#d6d01e" )
            +table-row( "orange", "#d66a1e" )
            +table-row( "red", "#d61e40" )
            +table-row( "pink", "#ec2666" )
            +table-row( "violet", "#981bd8" )
            +table-row( "purple", "#5930d6" )
            +table-row( "blue", "#1e9bd6" )
            +table-row( "teal", "#17b5b5" )
            +table-row( "mint", "#31e894" )
            +table-row( "green", "#1ed668" )



    +sub-title( "Customising" )

    :marked
        There's a global set `map` set to the `$colors`
        variable which is inherited by all othe colour
        modules (_text, background, etc_).

        The `$colors` map is a combination of:
        * `$base-colors` ( as shown above under "default colours" )
        * `$extra-colors` ( a map of some nice ui colours )
        * `$custom-colors` ( an empty map which can be supplied )

    +small-title( "Base Colours" )

    :marked
        These cannot be overridden, they are pretty
        standard across most UIs.

    +small-title( "Extra Colours" )

    :marked
        Extra Colours may be turned on, or off, by
        changing the boolean variable, `$no-extra-colors`,
        to true. (_default is false_).

    :prismjs( language = "scss" )
        // switch off the extra colours by 
        // placing this code _before_ your eezo 
        // import/include. e.g:
        $no-extra-colors: true;

    +small-title( "Custom Colours" )

    :marked
        If you'd prefer to supply your own set
        of colours to persist across the framework,
        you may do so by supplying them in a map
        called `$custom-colors`.

        Any colours supplied in `$custom-colors`, that share the
        same name as a colour in the default/extras map,
        will override the default version.

    :prismjs( language = "scss" )
        // Customise the colours for eezo,
        // - add some of our own colours
        // - override the default black colour.
        // - override the extra red colour.
        $custom-colors: (
            facebook-blue:  #3b5998,
            twitter-blue:   #55acee,
            black:          #010101,
            red:            #cc0000,
        );

    :marked
        We would now be able to reference the facebook/twitter
        colours, as well as our custom black/red anywhere that inherits them;

    :prismjs( language = "html" )
        <body class="txt-black">
            <!-- Body has our custom black text colour -->
            <h3 class="bor-1 bor-red"> Share </h3>
            <!-- Heading has our custom red as border -->
            <a href="facebook.com" class="bg-facebook-blue"> Facebook </a>
            <a href="twitter.com" class="bg-twitter-blue"> Twitter </a>
            <!-- Links have custom background colours -->
        </body>

    +small-title( "More information" )

    :marked
        See the following sections regarding the different properties
        that inherit colours:

        * [Text colours](/dist/docs/text/color.html)
        * [Background colours](/dist/docs/background/color.html)
        * [Border colours](/dist/docs/border/color.html)
        * [SVG fills](/dist/docs/svg/fill.html)





    +source-file( "/src/defaults/_colors.scss" )
